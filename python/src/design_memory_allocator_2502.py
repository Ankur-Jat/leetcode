"""
Leetcode: https://leetcode.com/problems/design-memory-allocator/
Date: 12-Dec-2022
Author: Ankur Jat (https://www.linkedin.com/in/ankur-jat-41355674/)
"""
from collections import defaultdict

class Allocator(object):
    
    def __init__(self, n):
        """
        :type n: int
        """
        self.memory = [0] * n
        self.n = n
        self.existingMIDs = defaultdict(list)
        self.freeBlocks = n
        
            
    def allocate(self, size, mID):
        """
        :type size: int
        :type mID: int
        :rtype: int
        """
        if self.freeBlocks < size:
            return -1
        for i in range(self.n):
            if self.memory[i]:
                continue
            index = i
            counter = 0
            while index < self.n and self.memory[index] == 0 and counter < size:
                index += 1
                counter += 1
            if counter == size:
                self.memory[i:i+size] = [mID] * size
                if self.existingMIDs[mID]:
                    self.existingMIDs[mID].append([i, size])
                else:
                    self.existingMIDs[mID] = [[i, size]]
                self.freeBlocks -= size
                return i
            i = index
        return -1
        

    def free(self, mID):
        """
        :type mID: int
        :rtype: int
        """
        if not self.existingMIDs[mID]:
            return 0
        size = 0
        for startIndex, innerSize in self.existingMIDs[mID]:
            size += innerSize
            self.memory[startIndex: startIndex + innerSize] = [0] * innerSize
        self.freeBlocks += size
        self.existingMIDs[mID] = []
        return size


def test():
    operations = ["Allocator","allocate","allocate","free","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate","allocate"]
    values = [[1000],[600,1],[400,2],[1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1],[602,1]]
    expectedResult = [None,0,600,600,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1]
    allocator = Allocator(*values[0])
    result = [None]
    for index, operation in enumerate(operations):
        if operation == 'allocate':
            result.append(allocator.allocate(*values[index]))
        elif operation == 'free':
            result.append(allocator.free(*values[index]))
    assert result == expectedResult, "Test case failed"

if __name__ == "__main__":
    test()